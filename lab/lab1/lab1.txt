Lab 1:
Cerinta 1) 
BNF:
<program> ::= <headers_block> <main_block>
<headers_block> ::= <headers_list> using namespace std ;
<headers_list> ::= <header> | <header> <headers_list>
<header> ::= # include <library>
<library> ::= "<" iostream ">" | "<" fstream ">"
<main_block> ::= <type> main ( ) { <instr_list> }
<type> ::= int | void | double | triple | point
<triple> ::= <non_zero_digit> . <digit> <digit> <digit>
<point> ::= struct { int ID; int ID; } ID;
<instr_list> ::= <instr> | <instr> <instr_list>
<instr> ::=  atribuire | read | write | if_instr | while_instr
<atribuire> ::= <type> ID; | ID = <expr>;
<expr> ::= ID | CONST | operand <expr>
<operand> ::= ID | CONST | CONST operator ID | ID operator ID
<operator> ::= + | - | / | * | > | < | != | <=
ID ::= CONST | CONST ID | <char> | <chars>
CONST ::= <integer> | <float>
<chars> ::= <char> | <char> <chars>
<char> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<integer> ::= <non_zero_digit> | <non_zero_digit> <digit_list>
<non_zero_digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<digit_list> ::= <digit> | <digit> <digit_list>
<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<float> ::= <integer> . <digit_list> | 0 . <digit_list>
<read> ::= cin >> ID;
<write> ::= cout << ID;
<if_instr> ::= if ( <expr> ) { <atribuire> } | if ( <expr> ) { <atribuire> } else { <atribuire> }
<while_instr> ::= while ( <expr> ) { <instr> } | while ( <expr> ) { <instr_list> }

Cerinta 2)
a) perimetrul si aria cercului de o raza data
#include <iostream>
using namespace std;

int main() {
	int perimetru;
	int r;
	cin >> r;
	double arie;
	perimetru = 2 * 3.14 * r;
	arie = pi * r * r;
	cout << perimetru;
	cout << arie;
}

b) cmmdc
#include <iostream>
using namespace std;

int main() {
	int n;
	int m;
	cin >> n;
	cin >> m;
	while (n != m){
		if(n > m) {
			n = n - m;
		}
		else {
			m = m - n; 
		}
	}
	cout << n;
}

c) suma a n numere citite de la tastatura
#include <iostream>
using namespace std;

int main() {
	int n;
	int suma; 
	int x;
	cin >> n;
	while(i <= n) {
		cin >> x;
		suma = suma + x;
		i = i + 1;
	}
	cout << suma;
}

Cerinta 3)
a) Unul dintre programe contine doua erori care sunt in acelasi timp erori in limbajul original (pentru care MLP defineste un subset)
#include <iostream>
using namespace std;

int main() {
	int perimetru;
	int 22r; 
	cin >> r;
	perimetru = 2 * 3.14 * r;
	double arie;
	arie = pi * r * r;
	cout << perimetru;
	cout << arie;
}

b) Al doilea program contine doua erori conform MLP, dar care nu sunt erori in limbajul original
#include <iostream>
using namespace std;

int main() {
	int n, m;
	cin >> n >> m;
	while (n != m){
		if(n > m) n -= m;
		else m -= n;
	}
	cout << n << endl;
	return 0;
}


Vlad: 
program = [libraries] source_code.

libraries = library {library}.
library = "#include" "<" library_name ">".
library_name = "iostream".

source_code = global_scope_code main_function.

global_scope_code = {function_definition} | {class_definition} 
    | {variable_definition}.

function_definition = type identifier "(" [parameter_list] ")" "{" statements "}".

identifier = letter identifier_tail.
identifier_tail = {letter} | {digit}.

letter = 'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'.
digit = '0' | '1' | '2' | ... | '9'.
type = "int" | "double" | identifier.

parameter_list = type identifier "," parameter_list | type identifier.

statements = {variable_definition} | {if_statement} 
    | {for_loop} | {input} | {output} | {assigment}
    | {return statement}.

variable_definition = type (assigment | identifier constructor_call).
assigment = identifier "=" constant ";".
constructor_call = "(" constant ")" | "{" constant "}".
constant = digit {digit}.

if_statement = "(" conditions ")".
conditions = condition "&&" conditions | condition.
condition = expression comparison_operator expression.
expression = (identifier | constant) operator expression | (identifier | constant).
comparison_operator = "==".
operator = "<" | "*" | "%".

for_loop = "(" "int" assigment ";" condition ";" identifier "++" ")" "{" 
    statements "}".

input = "std::cin" ">>" identifier ";".
output = "std::cout" "<<" 
    (identifier | constant | member_function_call | 
    function_call | "std:endl", '" "') ";".

member_function_call = identifier "." identifier "(" [parameter_list] ")".
function_call = identifier "(" [parameter_list] ")".

return_statement = expression ";".

class_definition = "class" identifier "{" 
    "private:" [variable_definition]
    "public:" constructor {function_definition}
    "}".

constructor = identifier "(" parameter_list ")" ":" constructor_call "{" "}".

-> nu are do while
-> nu are struct 
-> nu are else 
